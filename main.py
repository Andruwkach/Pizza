from random import randint

import click


def log(pattern):
    def sub_log(function):
        def sub_sub_log(self):
            function(self)
            cooking_time = randint(1, 100)
            print(pattern.format(cooking_time))

        return sub_sub_log

    return sub_log


class PizzaInfo:
    """–ö–ª–∞—Å—Å, –≤ –∫–æ—Ç–æ—Ä–æ–º —Å–æ–¥–µ—Ä–∂–∏—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∏—Ü—Ü–∞—Ö"""

    recipes = {
        "margherita": ["tomato sauce", "mozzarella", "tomatoes"],
        "pepperoni": ["tomato sauce", "mozzarella", "pepperoni"],
        "hawaiian": ["tomato sauce", "mozzarella", "chicken", "pineapples"],
    }
    emojies = {"margherita": "üßÄ", "pepperoni": "üçï", "hawaiian": "üçç"}
    facts = {
        "margherita": "–ü–µ—Ä–≤—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –¥–∞—Ç–∏—Ä—É—é—Ç—Å—è 1796 - 1810 –≥–æ–¥–∞–º–∏ (–ù–µ–∞–ø–æ–ª—å)",
        "pepperoni": "–≠—Ç–æ –∞–º–µ—Ä–∏–∫–∞–Ω—Å–∫–∞—è –ø–∏—Ü—Ü–∞, –Ω–∞ –∏—Ç–∞–ª—å—è–Ω—Å–∫–æ–º - pizza alla diavola",
        "hawaiian": "–û–¥–∏–Ω –∏–∑ —Å–∞–º—ã–π –º–æ–ª–æ–¥—ã—Ö –≤–∏–¥–æ–≤ –ø–∏—Ü—Ü: –ø—Ä–∏–¥—É–º–∞–Ω–∞ –≤ –ö–∞–Ω–∞–¥–µ –≤ 1962",
    }
    possible_sizes = {"L", "XL"}

    @staticmethod
    def dict() -> None:
        print(recipes)


class Pizza:
    """–∫–ª–∞—Å—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∏ –æ–ø–µ—Ä–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–æ–º –ø–∏—Ü—Ü–∞"""

    def __init__(self, pizza_type: str, pizza_size: str = "L"):
        pizza_size = pizza_size.upper()
        pizza_type = pizza_type.lower()
        assert pizza_type in PizzaInfo.recipes, "—Ç–∞–∫–æ–π –ø–∏—Ü—Ü—ã –≤ –º–µ–Ω—é –Ω–µ—Ç!"
        assert pizza_size in PizzaInfo.possible_sizes, "—Ç–∞–∫–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ –Ω–µ—Ç!"
        self.pizza_type = pizza_type
        self.ingredients = PizzaInfo.recipes.get(pizza_type)
        self.emoji = PizzaInfo.emojies.get(pizza_type)
        self.size = pizza_size
        self.status = "raw"

    def __str__(self) -> str:
        beauty_ingredients = ", ".join(self.ingredients)
        return f"- {self.pizza_type} {self.emoji}: {beauty_ingredients}"

    def __eq__(self, other) -> bool:
        if (self.pizza_type == other.pizza_type) and (self.size == other.size):
            return True
        return False

    def __ne__(self, other) -> bool:
        return not __eq__(self, other)

    def print_fact(self) -> None:
        print(
            PizzaInfo.facts.get(self.pizza_type, "–Ω–∏—á–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ, —Å–∫—É—á–Ω–∞—è –ø–∏—Ü—Ü–∞(")
        )

    @log("–î–æ—Å—Ç–∞–≤–∏–ª–∏ –∑–∞ {}—Å!")
    def delivery(self) -> None:
        """–î–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
        assert self.status == "backed", "–ø–∏—Ü—Ü–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞, –ª–∏–±–æ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞"
        self.status = "delivered"

    @log("–ó–∞–±—Ä–∞–ª–∏ –∑–∞ {}—Å!")
    def pickup(self) -> None:
        """–°–∞–º–æ–≤—ã–≤–æ–∑"""
        assert self.status == "backed", "–ø–∏—Ü—Ü–∞ –µ—â—ë –Ω–µ –≥–æ—Ç–æ–≤–∞, –ª–∏–±–æ —É–∂–µ –¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∞"
        self.status = "pickuped"

    @log("–ü—Ä–∏–≥–æ—Ç–æ–≤–∏–ª–∏ –∑–∞ {}—Å! –ê —á–µ–≥–æ –¥–æ–±–∏–ª—Å—è —Ç—ã?")
    def bake(self) -> None:
        """–ì–æ—Ç–æ–≤–∏—Ç –ø–∏—Ü—Ü—É"""
        assert self.status == "raw", "–ø–∏—Ü—Ü–∞ —É–∂–µ –≥–æ—Ç–æ–≤–∞!"
        self.status = "backed"


@click.group()
def cli():
    pass


@cli.command()
@click.argument("pizza", nargs=1)
@click.option("--delivery", default=False, is_flag=True)
@click.option("--size", default="L")
def order(pizza: str, size: str, delivery: bool) -> None:
    """–ì–æ—Ç–æ–≤–∏—Ç –∏ –¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç –ø–∏—Ü—Ü—É"""
    current_pizza = Pizza(pizza, size)
    current_pizza.bake()
    if delivery:
        current_pizza.delivery()
    else:
        current_pizza.pickup()


@cli.command()
def menu() -> None:
    """–í—ã–≤–æ–¥–∏—Ç –º–µ–Ω—é"""
    print("–°–µ–≥–æ–¥–Ω—è –≤ –º–µ–Ω—é –Ω–∞—à–µ–≥–æ —Ä–µ—Å—Ç–æ—Ä–∞–Ω–∞:")
    for piza_type in PizzaInfo.recipes:
        print(Pizza(piza_type))
    print("–î–ª—è –∑–∞–∫–∞–∑–∞ –≤—ã–±–µ—Ä–µ—Ç–∏ —Ç–∏–ø –ø–∏—Ü—Ü—ã")


if __name__ == "__main__":
    cli()
